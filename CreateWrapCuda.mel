/* ************************************************************************
 * Copyright 2013 Alexander Mishurov
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/

proc int meshOk(string $driverTrans)
{
  string $shapes[] = `ls -dag -shapes $driverTrans`;
  string $shape;
  for($shape in $shapes)
  {
    int $io = `getAttr ($shape+".io")`;
    if ($io == 1)
      continue;

    string $type = `nodeType($shape)`;
    if ($type == "mesh")
      return 1;
  }
  return 0;
}

global proc CreateWrapCuda()
{
  string $selectedItems[] = `ls -sl`;
  int $numSelected = size($selectedItems);

  if ($numSelected != 2)
    error("There should be two selected items");

  string $driverTrans = $selectedItems[$numSelected-1];
  if (!meshOk($driverTrans)) {
    error("Driver object is not a mesh");
    return;
  }

  string $deformedTrans = $selectedItems[0];
  if (!meshOk($deformedTrans)) {
    error("Deformed object is not a mesh");
    return;
  }

  string $reference[] = `duplicate -name ($driverTrans+"Base") $driverTrans`;
  string $referenceTrans = $reference[0];

  string $shapes[] = `ls -dag -shapes $driverTrans`;
  string $driverShape = $shapes[0];
  string $shapes[] = `ls -dag -shapes $referenceTrans`;
  string $referenceShape = $shapes[0];

  $wraps = `deformer -type wrapCuda $deformedTrans`;
  $wrapCuda = $wraps[0];
  connectAttr ($referenceShape+".worldMesh[0]") ($wrapCuda+".referenceSurface");
  connectAttr ($driverShape+".worldMesh[0]") ($wrapCuda+".driverSurface");
  hide $referenceTrans;
}